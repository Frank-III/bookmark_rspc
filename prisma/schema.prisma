// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "cargo prisma"
  output   = "../api/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @updatedAt @db.Timestamp(0)
  username    String   @unique @db.VarChar(255)
  name        String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  avatar      String?  @db.VarChar(255)
  bio         String?  @db.VarChar(255)
  connectedTG Boolean  @default(false)

  links               Link[]
  tags                Tag[]
  collections         Collection[]            @relation("UsersAndCollections")
  pinnedCollections   PinnedUserCollections[]
  UsersAndCollections UsersAndCollections[]
}

model Admin {
  id         String   @id
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
  username   String   @unique @db.VarChar(255)
  name       String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
}

model Collection {
  id            Int                     @id @default(autoincrement())
  name          String
  description   String                  @default("")
  color         String                  @default("#0ea5e9")
  isPublic      Boolean                 @default(false)
  owner         User                    @relation("UsersAndCollections", fields: [ownerId], references: [id])
  ownerId       String
  members       UsersAndCollections[]
  pinnedBy      PinnedUserCollections[]
  links         Link[]
  archivedLinks Int                     @default(0)
  totalLinks    Int                     @default(0)
  createdAt     DateTime                @default(now()) @db.Date

  @@unique([name, ownerId])
}

model UsersAndCollections {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  canCreate    Boolean
  canUpdate    Boolean
  canDelete    Boolean

  @@id([userId, collectionId])
}

model PinnedUserCollections {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  @@id([userId, collectionId])
}

model Link {
  id           Int        @id @default(autoincrement())
  name         String
  url          String
  description  String     @default("")
  archived     Boolean    @default(false)
  owner        User       @relation(fields: [ownerId], references: [id])
  ownerId      String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  tags         Tag[]
  createdAt    DateTime   @default(now())
}

model Tag {
  id      Int    @id @default(autoincrement())
  name    String
  color   String 
  links   Link[]
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@unique([name, ownerId])
}

model DailyStats {
  id         Int      @id @default(autoincrement())
  date       DateTime @default(now()) @db.Date
  totallinks Int
  archived   Int
  unarchived Int
}
