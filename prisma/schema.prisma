// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "cargo prisma"
  output   = "../api/src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  username   String    @unique(map: "customers_username_unique") @db.VarChar(255)
  name       String    @db.VarChar(255)
  email      String    @unique(map: "customers_email_unique") @db.VarChar(255)
  avatar     String?   @db.VarChar(255)

  collections Collection[]
  tags        Tag[]

  pinned_links      Link[]
  collectionsJoined UsersAndCollections[]
}

model Admins {
  id         String    @id
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  username   String    @unique(map: "admins_username_unique") @db.VarChar(255)
  name       String    @db.VarChar(255)
  email      String    @unique(map: "admins_email_unique") @db.VarChar(255)
}

model Collection {
  id          Int     @id @default(autoincrement())
  name        String
  description String  @default("")
  color       String  @default("#0ea5e9")
  isPublic    Boolean @default(false)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  members   UsersAndCollections[]
  links     Link[]
  createdAt DateTime              @default(now())

  @@unique([name, ownerId])
}

model UsersAndCollections {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int

  canCreate Boolean
  canUpdate Boolean
  canDelete Boolean

  @@id([userId, collectionId])
}

model Link {
  id          Int    @id @default(autoincrement())
  name        String
  url         String
  description String @default("")
  archived    Boolean @default(false)

  pinnedBy User[]

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int

  tags Tag[]

  createdAt DateTime @default(now())
}

model Tag {
  id      Int    @id @default(autoincrement())
  name    String
  links   Link[]
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@unique([name, ownerId])
}
